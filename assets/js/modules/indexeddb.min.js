class IndDB{constructor(e){this.db_name=e.db_name,this.db_version=e.db_version,this.db=null}open(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise(((r,t)=>{var o=indexedDB.open(this.db_name,this.db_version);o.onupgradeneeded=r=>{"upgrade"in e&&e.upgrade(r,this)},o.onerror=r=>t("error"in e?e.error(r,this):r.target.error||r),o.onblocked=e=>console.warn("Your database version can't be upgraded because the app is open somewhere else.",e),o.onsuccess=t=>{this.db="success"in e?e.success(t,this):t.target.result,r("Database ".concat(this.db_name,', version "').concat(this.db_version,'" is opened!'))}}))}delete(){return new Promise(((e,r)=>{var t;null===(t=this.db)||void 0===t||t.close();var o=indexedDB.deleteDatabase(this.db_name);["error","blocked"].forEach((e=>o.addEventListener(e,(e=>{var t="error"===e.type?"Couldn't delete database":"Couldn't delete database due to the operation being blocked";r(t+(e.target.error||e))}),!1))),o.onsuccess=()=>{e("Deleted database ".concat(this.db_name," successfully!"))}}))}_transaction(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"readonly",o=this.db.transaction(e,t);return o.oncomplete=e=>{"complete"in r&&r.complete(e,this)},o.onerror=e=>{console.error("Transaction not opened due to error!!!"),"error"in r&&r.error(e,this)},o.onabort=e=>{console.error("Transaction was aborted"),"abort"in r&&r.abort(e,this)},o}_dataValidate(e,r,t,o){return Array.isArray(e)||(e=Array.from([e])),Array.isArray(t)||(t=Array.from([t])),Array.isArray(r)&&r.length===e.length?{stores:e,queries:r,handlers:t}:(Array.isArray(r)||console.error("Data is not Array!"),r.length!==e.length&&console.error('The lengths of the arrays "stores" and "data" do not match!'),o.abort(),!1)}setStoreData(e,r){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:()=>{};return new Promise(((o,a)=>{var n={complete:e=>{o(e)},error:e=>{a(e)},abort:e=>{a(e)}},s=this._transaction(e,n,"readwrite");if(({stores:e,queries:r,handlers:t}=this._dataValidate(e,r,t,s)),e&&r)for(var i=function(t){var o=s.objectStore(e[t]);r[t].forEach((e=>{o.put(e).onerror=e=>{console.error('Add data request "<pre>'.concat((e=>null!==e?"string"==typeof e?e:JSON.stringify(e,null,"\t"):null),'<pre>" rejected')),a(e.target.error||e)}}))},d=0;d<e.length;d++)i(d)}))}getAllData(e){var{store:r,condition:t,index:o,value:a}=e;return new Promise((e=>{var n=this._transaction(r).objectStore(r);(t?n.index(o).getAll(a):n.getAll(a||null)).onsuccess=r=>{e(r.target.result)}}))}}export{IndDB};
//# sourceMappingURL=../maps/indexeddb.min.js.map
