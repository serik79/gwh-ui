{"version":3,"sources":["indexeddb.js"],"names":["IndDB","constructor","args","this","db_name","db_version","db","open","handlers","arguments","length","undefined","Promise","resolve","reject","request_db","indexedDB","onupgradeneeded","e","upgrade","onerror","err","error","target","onblocked","console","warn","onsuccess","success","result","concat","delete","_this$db","close","delete_db","deleteDatabase","forEach","evt","addEventListener","message","type","_transaction","stores","transaction","oncomplete","complete","onabort","abort","_dataValidate","queries","Array","isArray","from","setStoreData","transactionHandlers","_loop","i","store","objectStore","d","put","JSON","stringify","getAllData","query","store_name","condition","index","value","getAll"],"mappings":"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","file":"../modules/indexeddb.min.js","sourcesContent":["class IndDB {\r\n\tconstructor(args) {\r\n\t\t// Object.assign(this, args);\r\n\t\tthis.db_name = args.db_name;\r\n\t\tthis.db_version = args.db_version;\r\n\t\tthis.db = null;\r\n\t}\r\n\t\r\n\topen(handlers = {}) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst request_db = indexedDB.open(this.db_name, this.db_version);\r\n\t\t\trequest_db.onupgradeneeded = (e) => {\r\n\t\t\t\tif ('upgrade' in handlers) handlers.upgrade(e, this);\r\n\t\t\t}\r\n\t\t\trequest_db.onerror = (err) => reject(('error' in handlers) ? handlers.error(err, this) : (err.target.error || err));\r\n\t\t\trequest_db.onblocked = (e) => console.warn(\"Your database version can't be upgraded because the app is open somewhere else.\", e);\r\n\t\t\trequest_db.onsuccess = (e) => {\r\n\t\t\t\tthis.db = ('success' in handlers) ? handlers.success(e, this) : e.target.result;\r\n\t\t\t\tresolve(`Database ${this.db_name}, version \"${this.db_version}\" is opened!`);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t\r\n\tdelete() {\r\n\t\treturn new Promise((resolve, reject) =>{\r\n\t\t\tthis.db?.close();\r\n\t\t\tconst delete_db = indexedDB.deleteDatabase(this.db_name);\r\n\t\t\t['error', 'blocked'].forEach((evt) =>\r\n\t\t\t\tdelete_db.addEventListener(evt, (e) => {\r\n\t\t\t\t\tlet message = (e.type === 'error') ? \"Couldn't delete database\" : \"Couldn't delete database due to the operation being blocked\" ;\r\n\t\t\t\t\treject(message + (e.target.error || e));\r\n\t\t\t\t}, false)\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tdelete_db.onsuccess = () => {resolve(`Deleted database ${this.db_name} successfully!`)}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * type - 'readwrite' or 'readonly'\r\n\t * */\r\n\t_transaction(stores, handlers = {}, type = 'readonly'){\r\n\t\tlet transaction = this.db.transaction(stores, type);\r\n\t\ttransaction.oncomplete = (e) => {\r\n\t\t\t/** TODO: display in warnings */\r\n\t\t\tif ('complete' in handlers) handlers.complete(e, this);\r\n\t\t}\r\n\t\ttransaction.onerror = (err) => {\r\n\t\t\tconsole.error('Transaction not opened due to error!!!');\r\n\t\t\tif ('error' in handlers) handlers.error(err, this);\r\n\t\t}\r\n\t\ttransaction.onabort = (e) => {\r\n\t\t\tconsole.error('Transaction was aborted');\r\n\t\t\tif ('abort' in handlers) handlers.abort(e, this);\r\n\t\t};\r\n\t\treturn transaction;\r\n\t}\r\n\t\r\n\t\r\n\t_dataValidate(stores, queries, handlers, transaction) {\r\n\t\t\r\n\t\t/** TODO: валидацию нужно переделать */\r\n\t\tif (!Array.isArray(stores)) stores = Array.from([stores]);\r\n\t\tif (!Array.isArray(handlers)) handlers = Array.from([handlers]);\r\n\t\t\r\n\t\tif (!Array.isArray(queries) || queries.length !== stores.length) {\r\n\t\t\tif (!Array.isArray(queries)) console.error('Data is not Array!');\r\n\t\t\tif (queries.length !== stores.length) console.error('The lengths of the arrays \"stores\" and \"data\" do not match!');\r\n\t\t\ttransaction.abort();\r\n\t\t\treturn false;\r\n\t\t} else return {stores, queries, handlers};\r\n\t}\r\n\t\r\n\t\r\n\tsetStoreData(stores, queries, handlers = ()=>{}) {\r\n\t\treturn new Promise((resolve, reject) =>{\r\n\t\t\tlet transactionHandlers = {\r\n\t\t\t\tcomplete: (e) => {resolve(e)},\r\n\t\t\t\terror: (err) => {reject(err)},\r\n\t\t\t\tabort: (e) => {reject(e)}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet transaction = this._transaction(stores, transactionHandlers,'readwrite');\r\n\t\t\t\r\n\t\t\t({stores, queries, handlers} = this._dataValidate(stores, queries, handlers, transaction));\r\n\t\t\t\r\n\t\t\tif (stores && queries) {\r\n\t\t\t\tfor (let i = 0; i < stores.length; i++) {\r\n\t\t\t\t\tlet store = transaction.objectStore(stores[i]);\r\n\t\t\t\t\tqueries[i].forEach((d) => {\r\n\t\t\t\t\t\t// handlers(d);\r\n\t\t\t\t\t\tlet request = store.put(d);\r\n\t\t\t\t\t\trequest.onerror = (err) => {\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * TODO: хз, работает ли это построение, надо проверить ;)\r\n\t\t\t\t\t\t\t * */\r\n\t\t\t\t\t\t\tconsole.error(`Add data request \"<pre>${d => {\r\n\t\t\t\t\t\t\t\tif (d !== null) {\r\n\t\t\t\t\t\t\t\t\tif (typeof d === 'string') {\r\n\t\t\t\t\t\t\t\t\t\treturn d;\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\treturn JSON.stringify(d, null, '\\t');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}<pre>\" rejected`);\r\n\t\t\t\t\t\t\treject(err.target.error || err);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * query = {\r\n\t *     store: string,\r\n\t *     condition: boolean,\r\n\t *     index: string,\r\n\t *     value: string\r\n\t * }\r\n\t *\r\n\t * @param {object} query - The object argument.\r\n\t * @param {string} query.store - Store name.\r\n\t * @param {boolean} [query.condition] - Query condition.\r\n\t * @param {string} [query.index] - Query index.\r\n\t * @param {(string|null)} [query.value] - Query value.\r\n\t * @return {object} e.target.result - Search result.\r\n\t * */\r\n\tgetAllData(query) {\r\n\t\tlet {store: store_name, condition, index, value} = query;\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tconst store = this._transaction(store_name).objectStore(store_name);\r\n\t\t\tlet request;\r\n\t\t\t\r\n\t\t\tif (condition) {\r\n\t\t\t\trequest = store.index(index).getAll(value);\r\n\t\t\t} else request = store.getAll(value || null);\r\n\t\t\t\r\n\t\t\trequest.onsuccess = (e) => {\r\n\t\t\t\tresolve(e.target.result);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport { IndDB };\r\n"]}